import os
import enchant
import cv2
import pytesseract
import numpy as np
from typing import List, Dict

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
class HeadlineExtractor:
    def __init__(self, video_path: str, headline_region: tuple = None):
        """
        Initialize the headline extractor

        Args:
            video_path (str): Path to the video file
            headline_region (tuple): (x, y, width, height) of headline area.
                                     If None, will require manual region selection
        """
        self.video_path = video_path
        self.headline_region = headline_region
        self.headlines = set()

    def _preprocess_frame(self, frame: np.ndarray) -> np.ndarray:
        """
        Preprocess frame for better OCR accuracy

        Args:
            frame (np.ndarray): Input frame

        Returns:
            np.ndarray: Preprocessed frame

        """
        # Convert to grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Apply thresholding
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

        # Denoise
        denoised = cv2.fastNlMeansDenoising(binary)

        return denoised

    def select_headline_region(self) -> tuple:
        """
        Interactively select headline region

        Returns:
            tuple: (x, y, width, height) of selected region
        """
        cap = cv2.VideoCapture(self.video_path)
        ret, frame = cap.read()

        # ROI selection -> (101, 244, 422, 75)
        roi = (101, 244, 422, 75)
        # roi = cv2.selectROI("Select Headline Region", frame)
        # cv2.destroyAllWindows()
        # cap.release()
        return roi

    def extract_headlines(self, frame_interval: int = 1) -> List[str]:
        """
        Extract headlines from video

        Args:
            frame_interval (int): Process every nth frame

        Returns:
            List[str]: Extracted unique headlines
        """
        # Select region if not provided
        if not self.headline_region:
            self.headline_region = self.select_headline_region()

        # Open video capture
        cap = cv2.VideoCapture(self.video_path)
        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            # img = cv2.resize(frame, None, fx=1.2, fy=1.2, interpolation=cv2.INTER_CUBIC)
            # img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # kernel = np.ones((1, 1), np.uint8)
            # img = cv2.dilate(img, kernel, iterations=1)
            # img = cv2.erode(img, kernel, iterations=1)
            # cv2.threshold(cv2.GaussianBlur(img, (5, 5), 0), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            # cv2.threshold(cv2.bilateralFilter(img, 5, 75, 75), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            # cv2.threshold(cv2.medianBlur(img, 3), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            # cv2.adaptiveThreshold(cv2.GaussianBlur(img, (5, 5), 0), 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
            #                       cv2.THRESH_BINARY, 31, 2)
            # cv2.adaptiveThreshold(cv2.bilateralFilter(img, 9, 75, 75), 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
            #                       cv2.THRESH_BINARY, 31, 2)
            # cv2.adaptiveThreshold(cv2.medianBlur(img, 3), 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 31, 2)
            # # Process only at specified interval
            if frame_count % frame_interval == 0:
                # Extract region of interest
                x, y, w, h = self.headline_region
                roi = frame[y:y + h, x:x + w]

                # Preprocess and OCR
                preprocessed = self._preprocess_frame(roi)
                text = pytesseract.image_to_string(preprocessed,lang='eng')
                text = text.replace('\n',' ')
                if not text:
                    continue
                t_count = 0
                f_count = 0
                d = enchant.Dict("en_US")
                for word in text.split(' '):
                    if len(word) != 0:
                        if d.check(word):
                            t_count +=1
                        else:
                            f_count += 1
                per = t_count*100/(t_count+f_count)

                # Clean and add unique headlines  # Minimum meaningful text length
                if per > 60:
                    # print(text)
                    self.headlines.add(text)

            frame_count += 10

        cap.release()
        return list(self.headlines)


def get_vid_files():
    path = 'News_Files\\'
    dir_list = os.listdir(path)
    if len(dir_list) == 0:
        print('No Files to Check. Exiting the Code.')
        exit(0)
    for vid in dir_list:
        if '.mp4' in vid:
            main(path+vid)


def main(video_file):
    # Example usage
    # video_path = 'news_video.mp4'
    extractor = HeadlineExtractor(video_file)

    # Optional: Specify headline region manually if known
    extractor.headline_region = (101, 244, 422, 75)

    headlines = extractor.extract_headlines(frame_interval=1000)

    d = enchant.Dict("en_US")
    d.check(headlines[0][0])

    print("Extracted Headlines:")
    for idx, headline in enumerate(headlines, 1):
        print(f"{idx}. {headline}")


if __name__ == "__main__":
    get_vid_files()

